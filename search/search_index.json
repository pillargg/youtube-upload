{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PillarGG YouTube Uploader Upload Youtube Videos and more via Python. Getting Started pip install pillar-youtube-upload This project uses the Youtube Data API All implementations of youtube upload needs some form of authentication Client Side youtube upload To upload youtube videos as a client, you need to follow this guide . Server Side youtube upload To upload youtube videos as a server, you need to follow this guide . Getting a youtube api key First, you need to go to this website If prompted, select a project, or create a new one. Use the Library page to find and enable the YouTube Data API v3. Go to the credentials page Click Create credentials > OAuth client ID Select the Web application app type Fill in the form and click create. For testing redirect URIs that refer to the local machine with http://localhost:8080 Download the client_secret.json file from the API Console and securely store the file in a location that only your application can access. By default, the application gets this file from the directory your script is being ran in. The path can also be changed when the class YouTubeUploader is being initialized. Get your client_id and client_secret We recommend that you design your app's auth endpoints so that your application does not expose authorization codes to other resources on the page. The key must have the scope 'https://www.googleapis.com/auth/youtube.upload' Usage Info This module uploads a given video to a youtube channel, as such there are 2 things this module needs. - A video - Video Options - Title - Description - Tags - Category - Status - DeclaredMadeForKids A channel to upload to(In the form of a authentication file) The authentication file should contain the following: access_token: token_here refresh_token: token_here scope: scope_here token_type: Bearer expires_in: 3599 This file should be called client_secrets.sjon and exist in the directory this script is. Usage # youtube upload api from youtube_upload.client import YouTubeUploader uploader = YoutubeUploader(client_id,client_secret) uploader.authenticate() # Video options options = { title : \"Example title\", description : \"Example description\", tags : [\"tag1\", \"tag2\", \"tag3\"], categoryId : \"22\", privacyStatus : \"private\", kids : False thumbnailLink : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" } # upload video uploader.upload(file_path, options)","title":"PillarGG YouTube Uploader"},{"location":"#pillargg-youtube-uploader","text":"Upload Youtube Videos and more via Python.","title":"PillarGG YouTube Uploader"},{"location":"#getting-started","text":"pip install pillar-youtube-upload This project uses the Youtube Data API All implementations of youtube upload needs some form of authentication","title":"Getting Started"},{"location":"#client-side-youtube-upload","text":"To upload youtube videos as a client, you need to follow this guide .","title":"Client Side youtube upload"},{"location":"#server-side-youtube-upload","text":"To upload youtube videos as a server, you need to follow this guide .","title":"Server Side youtube upload"},{"location":"#getting-a-youtube-api-key","text":"First, you need to go to this website If prompted, select a project, or create a new one. Use the Library page to find and enable the YouTube Data API v3. Go to the credentials page Click Create credentials > OAuth client ID Select the Web application app type Fill in the form and click create. For testing redirect URIs that refer to the local machine with http://localhost:8080 Download the client_secret.json file from the API Console and securely store the file in a location that only your application can access. By default, the application gets this file from the directory your script is being ran in. The path can also be changed when the class YouTubeUploader is being initialized. Get your client_id and client_secret We recommend that you design your app's auth endpoints so that your application does not expose authorization codes to other resources on the page. The key must have the scope 'https://www.googleapis.com/auth/youtube.upload'","title":"Getting a youtube api key"},{"location":"#usage-info","text":"This module uploads a given video to a youtube channel, as such there are 2 things this module needs. - A video - Video Options - Title - Description - Tags - Category - Status - DeclaredMadeForKids A channel to upload to(In the form of a authentication file) The authentication file should contain the following: access_token: token_here refresh_token: token_here scope: scope_here token_type: Bearer expires_in: 3599 This file should be called client_secrets.sjon and exist in the directory this script is.","title":"Usage Info"},{"location":"#usage","text":"# youtube upload api from youtube_upload.client import YouTubeUploader uploader = YoutubeUploader(client_id,client_secret) uploader.authenticate() # Video options options = { title : \"Example title\", description : \"Example description\", tags : [\"tag1\", \"tag2\", \"tag3\"], categoryId : \"22\", privacyStatus : \"private\", kids : False thumbnailLink : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" } # upload video uploader.upload(file_path, options)","title":"Usage"},{"location":"YoutubeUploader/","text":"The YouTube Uploader client. __init__ ( self , client_id = '' , client_secret = '' , secrets_file_path = './client_secrets.json' ) special Initialization Function for the class. The variables client_id and client_secret can be passed in when the class is initialized, this will have the function generate the client_secrets.json file. If you do not pass the variables in, the class will look for a client_secrets.json file in the same direction in which the script is being initialized. You can instead pass in a directory to where the client_secrets.json is with the parameter secrets_file_path here is an example client_secrets.json file: { \"web\": { \"client_id\": \"\", \"client_secret\": \"\", \"redirect_uris\": [], \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\": \"https://accounts.google.com/o/oauth2/token\" } } authenticate ( self , oauth_path = 'oauth.json' ) This method authenticates the user with Google's servers. If you give no path, the method will look for the oauth.json file in the current working directory. If a path is given, and the file does not exist at that path, the file will be created at that path. If the file does exist at the given path, it will be used. upload ( self , file_path , options = {}, chunksize =- 1 ) This uploads the file to YouTube. The only required argument is the file_path , which is the path to the video to be uploaded. The options parameter is a dictionary of options. The items are pretty self explanatory, here is an example options dictionary: # Video options options = { title : \"Example title\", description : \"Example description\", tags : [\"tag1\", \"tag2\", \"tag3\"], categoryId : \"22\", privacyStatus : \"private\", kids : False thumbnailLink : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" } Finally, chunk_size is the max size of the HTTP request to send the video. This parameter is in bytes, and if set to -1 , which is the default, it will send the video in one large request. Set this to a different value if you are having issues with the upload failing.","title":"YoutubeUploader"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader","text":"The YouTube Uploader client.","title":"youtube_upload.client.YoutubeUploader"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader.__init__","text":"Initialization Function for the class. The variables client_id and client_secret can be passed in when the class is initialized, this will have the function generate the client_secrets.json file. If you do not pass the variables in, the class will look for a client_secrets.json file in the same direction in which the script is being initialized. You can instead pass in a directory to where the client_secrets.json is with the parameter secrets_file_path here is an example client_secrets.json file: { \"web\": { \"client_id\": \"\", \"client_secret\": \"\", \"redirect_uris\": [], \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\": \"https://accounts.google.com/o/oauth2/token\" } }","title":"__init__()"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader.authenticate","text":"This method authenticates the user with Google's servers. If you give no path, the method will look for the oauth.json file in the current working directory. If a path is given, and the file does not exist at that path, the file will be created at that path. If the file does exist at the given path, it will be used.","title":"authenticate()"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader.upload","text":"This uploads the file to YouTube. The only required argument is the file_path , which is the path to the video to be uploaded. The options parameter is a dictionary of options. The items are pretty self explanatory, here is an example options dictionary: # Video options options = { title : \"Example title\", description : \"Example description\", tags : [\"tag1\", \"tag2\", \"tag3\"], categoryId : \"22\", privacyStatus : \"private\", kids : False thumbnailLink : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" } Finally, chunk_size is the max size of the HTTP request to send the video. This parameter is in bytes, and if set to -1 , which is the default, it will send the video in one large request. Set this to a different value if you are having issues with the upload failing.","title":"upload()"}]}