{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"YoutubeUploader Docs Welcome to the Pillar Youtube-Upload docs. All documentation for this project can be found here.","title":"YoutubeUploader Docs"},{"location":"#youtubeuploader-docs","text":"Welcome to the Pillar Youtube-Upload docs. All documentation for this project can be found here.","title":"YoutubeUploader Docs"},{"location":"YoutubeUploader/","text":"The YouTube Uploader client. __init__ ( self , client_id = '' , client_secret = '' , secrets_file_path = './client_secrets.json' ) special Initialization Function for the class. The variables client_id and client_secret can be passed in when the class is initialized, this will have the function generate the client_secrets.json file. If you do not pass the variables in, the class will look for a client_secrets.json file in the same direction in which the script is being initialized. You can instead pass in a directory to where the client_secrets.json is with the parameter secrets_file_path here is an example client_secrets.json file: { \"web\": { \"client_id\": \"\", \"client_secret\": \"\", \"redirect_uris\": [], \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\": \"https://accounts.google.com/o/oauth2/token\" } } authenticate ( self , oauth_path = 'oauth.json' ) This method authenticates the user with Google's servers. If you give no path, the method will look for the oauth.json file in the current working directory. If a path is given, and the file does not exist at that path, the file will be created at that path. If the file does exist at the given path, it will be used. upload ( self , file_path , options = {}, chunksize =- 1 ) This uploads the file to YouTube. The only required argument is the file_path , which is the path to the video to be uploaded. The options parameter is a dictionary of options. The items are pretty self explanatory, here is an example options dictionary: # Video options options = { title : \"Example title\", description : \"Example description\", tags : [\"tag1\", \"tag2\", \"tag3\"], categoryId : \"22\", privacyStatus : \"private\", kids : False thumbnailLink : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" } Finally, chunk_size is the max size of the HTTP request to send the video. This parameter is in bytes, and if set to -1 , which is the default, it will send the video in one large request. Set this to a different value if you are having issues with the upload failing.","title":"YoutubeUploader"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader","text":"The YouTube Uploader client.","title":"youtube_upload.client.YoutubeUploader"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader.__init__","text":"Initialization Function for the class. The variables client_id and client_secret can be passed in when the class is initialized, this will have the function generate the client_secrets.json file. If you do not pass the variables in, the class will look for a client_secrets.json file in the same direction in which the script is being initialized. You can instead pass in a directory to where the client_secrets.json is with the parameter secrets_file_path here is an example client_secrets.json file: { \"web\": { \"client_id\": \"\", \"client_secret\": \"\", \"redirect_uris\": [], \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\": \"https://accounts.google.com/o/oauth2/token\" } }","title":"__init__()"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader.authenticate","text":"This method authenticates the user with Google's servers. If you give no path, the method will look for the oauth.json file in the current working directory. If a path is given, and the file does not exist at that path, the file will be created at that path. If the file does exist at the given path, it will be used.","title":"authenticate()"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader.upload","text":"This uploads the file to YouTube. The only required argument is the file_path , which is the path to the video to be uploaded. The options parameter is a dictionary of options. The items are pretty self explanatory, here is an example options dictionary: # Video options options = { title : \"Example title\", description : \"Example description\", tags : [\"tag1\", \"tag2\", \"tag3\"], categoryId : \"22\", privacyStatus : \"private\", kids : False thumbnailLink : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" } Finally, chunk_size is the max size of the HTTP request to send the video. This parameter is in bytes, and if set to -1 , which is the default, it will send the video in one large request. Set this to a different value if you are having issues with the upload failing.","title":"upload()"}]}