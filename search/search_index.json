{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PillarGG YouTube Uploader Upload Youtube Videos and more via Python. Getting Started pip install pillar-youtube-upload You can read more below and on the docs . This project uses the Youtube Data API . All implementations of youtube upload needs some form of authentication . Client Side youtube upload To upload youtube videos as a client, you need to follow this guide . Server Side youtube upload To upload youtube videos as a server, you need to follow this guide . Getting a youtube api key First, you need to go to this website . If prompted, select a project, or create a new one. Use the Library page to find and enable the YouTube Data API v3. Go to the credentials page . Click Create Credentials > OAuth client ID . Select the Web application app type. Fill in the form and click create. For testing redirect URIs that refer to the local machine with http://localhost:8080 . Download the client_secret.json file from the API Console and securely store the file in a location that only your application can access. By default, the application gets this file from the directory your script is being ran in. The path can also be changed when the class YoutubeUploader is being initialized. Get your client_id and client_secret . We recommend that you design your app's auth endpoints so that your application does not expose authorization codes to other resources on the page. The key must have the scope 'https://www.googleapis.com/auth/youtube.upload'. Usage Info The variables client_id and client_secret are how Google identify your application. These are specified in the initialization parameters or in the client_secrets.json file. The variables access_token and refresh_token are how Google's APIs differentiate between different YouTube channels. These are specified in the authenticate method. This module uploads a given video to a youtube channel, as such there are 2 things this module needs. - A video - Video Options - Title - Description - Tags - Category - Status - DeclaredMadeForKids A channel to upload to(In the form of a authentication file) The authentication file should contain the following: access_token: token_here refresh_token: token_here scope: scope_here token_type: Bearer expires_in: 3599 This file should be called client_secrets.json and exist in the directory this script is. Usage 0. Importing the package # youtube upload api from youtube_upload.client import YoutubeUploader 1. Instantiating an uploader uploader = YoutubeUploader(client_id,client_secret) or uploader = YoutubeUploader() If a client_secrets.json is present in the current working directory (downloaded from the Credentials Control Panel in the Google Cloud Console when you create the application). or uploader = YoutubeUploader(secrets_file_path=secrets_file_path_here) You can specify the path to the file with the secrets_file_path parameter. 2. Authentication If you run authenticate with no parameters and no oauth.json , it opens a web page locally that you can use to sign into the YouTube Channel you want to upload the video to. uploader.authenticate() or uploader.authenticate(access_token=access_token_here, refresh_token=refresh_token_here) OR uploader.authenticate(oauth_path='oauth.json') 3. Uploading the video # Video options options = { \"title\" : \"Example title\", # The video title \"description\" : \"Example description\", # The video description \"tags\" : [\"tag1\", \"tag2\", \"tag3\"], \"categoryId\" : \"22\", \"privacyStatus\" : \"private\", # Video privacy. Can either be \"public\", \"private\", or \"unlisted\" \"kids\" : False, # Specifies if the Video if for kids or not. Defaults to False. \"thumbnailLink\" : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" # Optional. Specifies video thumbnail. } # upload video uploader.upload(file_path, options) Parameter tags should be list of strings only. The parameter categoryId refers to YouTube internal categories, more information can be found here . 4. Closing the uploader uploader.close()","title":"Home"},{"location":"#pillargg-youtube-uploader","text":"Upload Youtube Videos and more via Python.","title":"PillarGG YouTube Uploader"},{"location":"#getting-started","text":"pip install pillar-youtube-upload You can read more below and on the docs . This project uses the Youtube Data API . All implementations of youtube upload needs some form of authentication .","title":"Getting Started"},{"location":"#client-side-youtube-upload","text":"To upload youtube videos as a client, you need to follow this guide .","title":"Client Side youtube upload"},{"location":"#server-side-youtube-upload","text":"To upload youtube videos as a server, you need to follow this guide .","title":"Server Side youtube upload"},{"location":"#getting-a-youtube-api-key","text":"First, you need to go to this website . If prompted, select a project, or create a new one. Use the Library page to find and enable the YouTube Data API v3. Go to the credentials page . Click Create Credentials > OAuth client ID . Select the Web application app type. Fill in the form and click create. For testing redirect URIs that refer to the local machine with http://localhost:8080 . Download the client_secret.json file from the API Console and securely store the file in a location that only your application can access. By default, the application gets this file from the directory your script is being ran in. The path can also be changed when the class YoutubeUploader is being initialized. Get your client_id and client_secret . We recommend that you design your app's auth endpoints so that your application does not expose authorization codes to other resources on the page. The key must have the scope 'https://www.googleapis.com/auth/youtube.upload'.","title":"Getting a youtube api key"},{"location":"#usage-info","text":"The variables client_id and client_secret are how Google identify your application. These are specified in the initialization parameters or in the client_secrets.json file. The variables access_token and refresh_token are how Google's APIs differentiate between different YouTube channels. These are specified in the authenticate method. This module uploads a given video to a youtube channel, as such there are 2 things this module needs. - A video - Video Options - Title - Description - Tags - Category - Status - DeclaredMadeForKids A channel to upload to(In the form of a authentication file) The authentication file should contain the following: access_token: token_here refresh_token: token_here scope: scope_here token_type: Bearer expires_in: 3599 This file should be called client_secrets.json and exist in the directory this script is.","title":"Usage Info"},{"location":"#usage","text":"","title":"Usage"},{"location":"#0-importing-the-package","text":"# youtube upload api from youtube_upload.client import YoutubeUploader","title":"0. Importing the package"},{"location":"#1-instantiating-an-uploader","text":"uploader = YoutubeUploader(client_id,client_secret) or uploader = YoutubeUploader() If a client_secrets.json is present in the current working directory (downloaded from the Credentials Control Panel in the Google Cloud Console when you create the application). or uploader = YoutubeUploader(secrets_file_path=secrets_file_path_here) You can specify the path to the file with the secrets_file_path parameter.","title":"1. Instantiating an uploader"},{"location":"#2-authentication","text":"If you run authenticate with no parameters and no oauth.json , it opens a web page locally that you can use to sign into the YouTube Channel you want to upload the video to. uploader.authenticate() or uploader.authenticate(access_token=access_token_here, refresh_token=refresh_token_here) OR uploader.authenticate(oauth_path='oauth.json')","title":"2. Authentication"},{"location":"#3-uploading-the-video","text":"# Video options options = { \"title\" : \"Example title\", # The video title \"description\" : \"Example description\", # The video description \"tags\" : [\"tag1\", \"tag2\", \"tag3\"], \"categoryId\" : \"22\", \"privacyStatus\" : \"private\", # Video privacy. Can either be \"public\", \"private\", or \"unlisted\" \"kids\" : False, # Specifies if the Video if for kids or not. Defaults to False. \"thumbnailLink\" : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" # Optional. Specifies video thumbnail. } # upload video uploader.upload(file_path, options) Parameter tags should be list of strings only. The parameter categoryId refers to YouTube internal categories, more information can be found here .","title":"3. Uploading the video"},{"location":"#4-closing-the-uploader","text":"uploader.close()","title":"4. Closing the uploader"},{"location":"Usage/","text":"Usage Info The variables client_id and client_secret are how Google identify your application. These are specified in the initialization parameters or in the client_secrets.json file. The variables access_token and refresh_token are how Google's APIs differentiate between different YouTube channels. These are specified in the authenticate method. This module uploads a given video to a youtube channel, as such there are 2 things this module needs. - A video - Video Options - Title - Description - Tags - Category - Status - DeclaredMadeForKids A channel to upload to(In the form of a authentication file) The authentication file should contain the following: access_token: token_here refresh_token: token_here scope: scope_here token_type: Bearer expires_in: 3599 This file should be called client_secrets.json and exist in the directory this script is. Quick Start 0. Importing the package # youtube upload api from youtube_upload.client import YoutubeUploader 1. Instantiating an uploader uploader = YoutubeUploader(client_id,client_secret) or uploader = YoutubeUploader() If a client_secrets.json is present in the current working directory (downloaded from the Credentials Control Panel in the Google Cloud Console when you create the application). or uploader = YoutubeUploader(secrets_file_path=secrets_file_path_here) You can specify the path to the file with the secrets_file_path parameter. 2. Authentication If you run authenticate with no parameters and no oauth.json , it opens a web page locally that you can use to sign into the YouTube Channel you want to upload the video to. uploader.authenticate() or uploader.authenticate(access_token=access_token_here, refresh_token=refresh_token_here) OR uploader.authenticate(oauth_path='oauth.json') 3. Uploading the video # Video options options = { \"title\" : \"Example title\", # The video title \"description\" : \"Example description\", # The video description \"tags\" : [\"tag1\", \"tag2\", \"tag3\"], \"categoryId\" : \"22\", \"privacyStatus\" : \"private\", # Video privacy. Can either be \"public\", \"private\", or \"unlisted\" \"kids\" : False # Specifies if the Video if for kids or not. Defaults to False. \"thumbnailLink\" : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" # Optional. Specifies video thumbnail. } # upload video uploader.upload(file_path, options) Parameter tags should be list of strings only. The parameter categoryId refers to YouTube internal categories, more information can be found here . 4. Closing the uploader uploader.close()","title":"Usage"},{"location":"Usage/#usage-info","text":"The variables client_id and client_secret are how Google identify your application. These are specified in the initialization parameters or in the client_secrets.json file. The variables access_token and refresh_token are how Google's APIs differentiate between different YouTube channels. These are specified in the authenticate method. This module uploads a given video to a youtube channel, as such there are 2 things this module needs. - A video - Video Options - Title - Description - Tags - Category - Status - DeclaredMadeForKids A channel to upload to(In the form of a authentication file) The authentication file should contain the following: access_token: token_here refresh_token: token_here scope: scope_here token_type: Bearer expires_in: 3599 This file should be called client_secrets.json and exist in the directory this script is.","title":"Usage Info"},{"location":"Usage/#quick-start","text":"","title":"Quick Start"},{"location":"Usage/#0-importing-the-package","text":"# youtube upload api from youtube_upload.client import YoutubeUploader","title":"0. Importing the package"},{"location":"Usage/#1-instantiating-an-uploader","text":"uploader = YoutubeUploader(client_id,client_secret) or uploader = YoutubeUploader() If a client_secrets.json is present in the current working directory (downloaded from the Credentials Control Panel in the Google Cloud Console when you create the application). or uploader = YoutubeUploader(secrets_file_path=secrets_file_path_here) You can specify the path to the file with the secrets_file_path parameter.","title":"1. Instantiating an uploader"},{"location":"Usage/#2-authentication","text":"If you run authenticate with no parameters and no oauth.json , it opens a web page locally that you can use to sign into the YouTube Channel you want to upload the video to. uploader.authenticate() or uploader.authenticate(access_token=access_token_here, refresh_token=refresh_token_here) OR uploader.authenticate(oauth_path='oauth.json')","title":"2. Authentication"},{"location":"Usage/#3-uploading-the-video","text":"# Video options options = { \"title\" : \"Example title\", # The video title \"description\" : \"Example description\", # The video description \"tags\" : [\"tag1\", \"tag2\", \"tag3\"], \"categoryId\" : \"22\", \"privacyStatus\" : \"private\", # Video privacy. Can either be \"public\", \"private\", or \"unlisted\" \"kids\" : False # Specifies if the Video if for kids or not. Defaults to False. \"thumbnailLink\" : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" # Optional. Specifies video thumbnail. } # upload video uploader.upload(file_path, options) Parameter tags should be list of strings only. The parameter categoryId refers to YouTube internal categories, more information can be found here .","title":"3. Uploading the video"},{"location":"Usage/#4-closing-the-uploader","text":"uploader.close()","title":"4. Closing the uploader"},{"location":"YoutubeUploader/","text":"The YouTube Uploader service. When using in a multithreaded environment, please create a new instance of the YoutubeUploader class per thread. __init__ ( self , client_id = None , client_secret = None , secrets_file_path = './client_secrets.json' ) special Initialization Function for the class. The variables client_id and client_secret can be passed in when the class is initialized, this will have the function generate the client_secrets.json file. If you do not pass the variables in, the class will look for a client_secrets.json file in the same direction in which the script is being initialized. You can instead pass in a directory to where the client_secrets.json is with the parameter secrets_file_path here is an example client_secrets.json file: { \"web\": { \"client_id\": \"\", \"client_secret\": \"\", \"redirect_uris\": [], \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\": \"https://accounts.google.com/o/oauth2/token\" } } authenticate ( self , oauth_path = 'oauth.json' , access_token = None , refresh_token = None ) This method authenticates the user with Google's servers. If you give no path, the method will look for the oauth.json file in the current working directory. If a path is given, and the file does not exist at that path, the file will be created at that path. If the file does exist at the given path, it will be used. If in the case that you do not have an OAuth JSON file, you can specify an access and refresh token via the access_token and refresh_token parameters. close ( self ) Tears down and closes the class cleanly. upload ( self , file_path , options = None , chunksize =- 1 ) This uploads the file to YouTube. The only required argument is the file_path , which is the path to the video to be uploaded. The options parameter is a dictionary of options. The items are pretty self explanatory, here is an example options dictionary: # Video options options = { title : \"Example title\", description : \"Example description\", tags : [\"tag1\", \"tag2\", \"tag3\"], categoryId : \"22\", privacyStatus : \"private\", kids : False thumbnailLink : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" } The parameter, chunk_size is the max size of the HTTP request to send the video. This parameter is in bytes, and if set to -1 , which is the default, it will send the video in one large request. Set this to a different value if you are having issues with the upload failing. Will return the response from YouTube, as well as the response of the thumbnail upload as a tuple. response, thumbnail_response = client.upload(file_path, options) upload_stream ( self , file_object , options = None , chunksize =- 1 ) Uploads the file to YouTube from the specified file-like object. We are using this to stream files from S3 to YouTube! import s3fs from youtube_upload.client import YouTubeUploader fs = s3fs.S3FileSystem(anon=True) video = fs.open('s3://bucket/video.mp4') client = YouTubeUploader() client.authenticate() client.upload_stream(video) client.close() video.close() The options parameter is a dictionary of options. The items are pretty self explanatory, here is an example options dictionary: # Video options options = { title : \"Example title\", description : \"Example description\", tags : [\"tag1\", \"tag2\", \"tag3\"], categoryId : \"22\", privacyStatus : \"private\", kids : False thumbnailLink : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" } The parameter, chunk_size is the max size of the HTTP request to send the video. This parameter is in bytes, and if set to -1 , which is the default, it will send the video in one large request. Set this to a different value if you are having issues with the upload failing. Will return the response from YouTube, as well as the response of the thumbnail upload as a tuple. response, thumbnail_response = client.upload(file_path, options)","title":"YoutubeUploader"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader","text":"The YouTube Uploader service. When using in a multithreaded environment, please create a new instance of the YoutubeUploader class per thread.","title":"youtube_upload.client.YoutubeUploader"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader.__init__","text":"Initialization Function for the class. The variables client_id and client_secret can be passed in when the class is initialized, this will have the function generate the client_secrets.json file. If you do not pass the variables in, the class will look for a client_secrets.json file in the same direction in which the script is being initialized. You can instead pass in a directory to where the client_secrets.json is with the parameter secrets_file_path here is an example client_secrets.json file: { \"web\": { \"client_id\": \"\", \"client_secret\": \"\", \"redirect_uris\": [], \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\": \"https://accounts.google.com/o/oauth2/token\" } }","title":"__init__()"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader.authenticate","text":"This method authenticates the user with Google's servers. If you give no path, the method will look for the oauth.json file in the current working directory. If a path is given, and the file does not exist at that path, the file will be created at that path. If the file does exist at the given path, it will be used. If in the case that you do not have an OAuth JSON file, you can specify an access and refresh token via the access_token and refresh_token parameters.","title":"authenticate()"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader.close","text":"Tears down and closes the class cleanly.","title":"close()"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader.upload","text":"This uploads the file to YouTube. The only required argument is the file_path , which is the path to the video to be uploaded. The options parameter is a dictionary of options. The items are pretty self explanatory, here is an example options dictionary: # Video options options = { title : \"Example title\", description : \"Example description\", tags : [\"tag1\", \"tag2\", \"tag3\"], categoryId : \"22\", privacyStatus : \"private\", kids : False thumbnailLink : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" } The parameter, chunk_size is the max size of the HTTP request to send the video. This parameter is in bytes, and if set to -1 , which is the default, it will send the video in one large request. Set this to a different value if you are having issues with the upload failing. Will return the response from YouTube, as well as the response of the thumbnail upload as a tuple. response, thumbnail_response = client.upload(file_path, options)","title":"upload()"},{"location":"YoutubeUploader/#youtube_upload.client.YoutubeUploader.upload_stream","text":"Uploads the file to YouTube from the specified file-like object. We are using this to stream files from S3 to YouTube! import s3fs from youtube_upload.client import YouTubeUploader fs = s3fs.S3FileSystem(anon=True) video = fs.open('s3://bucket/video.mp4') client = YouTubeUploader() client.authenticate() client.upload_stream(video) client.close() video.close() The options parameter is a dictionary of options. The items are pretty self explanatory, here is an example options dictionary: # Video options options = { title : \"Example title\", description : \"Example description\", tags : [\"tag1\", \"tag2\", \"tag3\"], categoryId : \"22\", privacyStatus : \"private\", kids : False thumbnailLink : \"https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg\" } The parameter, chunk_size is the max size of the HTTP request to send the video. This parameter is in bytes, and if set to -1 , which is the default, it will send the video in one large request. Set this to a different value if you are having issues with the upload failing. Will return the response from YouTube, as well as the response of the thumbnail upload as a tuple. response, thumbnail_response = client.upload(file_path, options)","title":"upload_stream()"}]}